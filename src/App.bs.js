// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReasonReact from "reason-react/src/ReasonReact.js";
import * as Store$ReactTemplate from "./Store.bs.js";
import * as Basket$ReactTemplate from "./Basket.bs.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

var albumsData = /* :: */[
  /* record */[
    /* name */"Drip Harder",
    /* artist */"Lil Baby & Gunna",
    /* count */10
  ],
  /* :: */[
    /* record */[
      /* name */"Scorpion",
      /* artist */"Drake",
      /* count */10
    ],
    /* :: */[
      /* record */[
        /* name */"ASTROWORLD",
        /* artist */"Travis Scott",
        /* count */10
      ],
      /* :: */[
        /* record */[
          /* name */"Beerbongs & Bentleys",
          /* artist */"Post Malone",
          /* count */10
        ],
        /* :: */[
          /* record */[
            /* name */"Kamikazer",
            /* artist */"Eminem",
            /* count */10
          ],
          /* :: */[
            /* record */[
              /* name */"Luca Brasi 3",
              /* artist */"Kevin Gates",
              /* count */10
            ],
            /* :: */[
              /* record */[
                /* name */"Dime Trap",
                /* artist */"T.I",
                /* count */10
              ],
              /* :: */[
                /* record */[
                  /* name */"?",
                  /* artist */"XXXTENTACION",
                  /* count */10
                ],
                /* :: */[
                  /* record */[
                    /* name */"Queen",
                    /* artist */"Nicki Minaj",
                    /* count */10
                  ],
                  /* :: */[
                    /* record */[
                      /* name */"Invasion Of Privacy",
                      /* artist */"Cardi B",
                      /* count */10
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var component = ReasonReact.reducerComponent("App");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          className: "app"
                        }, ReasonReact.element(undefined, undefined, Store$ReactTemplate.make(self[/* state */1][/* availableAlbums */0], (function (album) {
                                    return Curry._1(self[/* send */3], /* ADD_TO_BASKET */Block.__(0, [album]));
                                  }), /* array */[])), ReasonReact.element(undefined, undefined, Basket$ReactTemplate.make(self[/* state */1][/* albumsInBasket */1], (function (album) {
                                    return Curry._1(self[/* send */3], /* REMOVE_FROM_BASKET */Block.__(1, [album]));
                                  }), /* array */[])));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* availableAlbums */albumsData,
                      /* albumsInBasket : [] */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (action.tag) {
                var match = action[0];
                var name = match[/* name */0];
                var availableAlbums = List.map((function (album) {
                        if (album[/* name */0] === name) {
                          return /* record */[
                                  /* name */album[/* name */0],
                                  /* artist */album[/* artist */1],
                                  /* count */album[/* count */2] + 1 | 0
                                ];
                        } else {
                          return album;
                        }
                      }), state[/* availableAlbums */0]);
                var albumsInBasket;
                var exit = 0;
                var val;
                try {
                  val = List.find((function (album) {
                          return album[/* name */0] === name;
                        }), state[/* albumsInBasket */1]);
                  exit = 1;
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    albumsInBasket = /* :: */[
                      /* record */[
                        /* name */name,
                        /* artist */match[/* artist */1],
                        /* count */1
                      ],
                      state[/* albumsInBasket */1]
                    ];
                  } else {
                    throw exn;
                  }
                }
                if (exit === 1) {
                  albumsInBasket = List.filter((function (album) {
                            return album[/* count */2] > 0;
                          }))(List.map((function (album) {
                              var match = album[/* name */0] === name;
                              if (match) {
                                return /* record */[
                                        /* name */album[/* name */0],
                                        /* artist */album[/* artist */1],
                                        /* count */album[/* count */2] - 1 | 0
                                      ];
                              } else {
                                return album;
                              }
                            }), state[/* albumsInBasket */1]));
                }
                return /* Update */Block.__(0, [/* record */[
                            /* availableAlbums */availableAlbums,
                            /* albumsInBasket */albumsInBasket
                          ]]);
              } else {
                var match$1 = action[0];
                var name$1 = match$1[/* name */0];
                var availableAlbums$1 = List.map((function (album) {
                        if (album[/* name */0] === name$1) {
                          return /* record */[
                                  /* name */album[/* name */0],
                                  /* artist */album[/* artist */1],
                                  /* count */album[/* count */2] - 1 | 0
                                ];
                        } else {
                          return album;
                        }
                      }), state[/* availableAlbums */0]);
                var albumsInBasket$1;
                var exit$1 = 0;
                var val$1;
                try {
                  val$1 = List.find((function (album) {
                          return album[/* name */0] === name$1;
                        }), state[/* albumsInBasket */1]);
                  exit$1 = 1;
                }
                catch (exn$1){
                  if (exn$1 === Caml_builtin_exceptions.not_found) {
                    albumsInBasket$1 = /* :: */[
                      /* record */[
                        /* name */name$1,
                        /* artist */match$1[/* artist */1],
                        /* count */1
                      ],
                      state[/* albumsInBasket */1]
                    ];
                  } else {
                    throw exn$1;
                  }
                }
                if (exit$1 === 1) {
                  albumsInBasket$1 = List.map((function (album) {
                          var match = album[/* name */0] === name$1;
                          if (match) {
                            return /* record */[
                                    /* name */album[/* name */0],
                                    /* artist */album[/* artist */1],
                                    /* count */album[/* count */2] + 1 | 0
                                  ];
                          } else {
                            return album;
                          }
                        }), state[/* albumsInBasket */1]);
                }
                return /* Update */Block.__(0, [/* record */[
                            /* availableAlbums */availableAlbums$1,
                            /* albumsInBasket */albumsInBasket$1
                          ]]);
              }
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

export {
  albumsData ,
  component ,
  make ,
  
}
/* component Not a pure module */
